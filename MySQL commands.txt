* SQL commands and keywords are case-insensitive.
* Table names are case-sensitive on Linux and OS X, but case-insensitive on Windows.

* MySQL Data Types : 1)INT UNSIGNED, 2)NOT NULL, 3)AUTO-INCREMENT, 4)KEY, 5)UNIQUE, 6)PRIMARY KEY

\c : exit from MysQL syntax program

* bin\mysql -u root        : grant access to MySQL program in the root directory without using password
* bin\mysql -u username -p : grant access to MySQL program for the username using specific password

GRANT ALL on databasename.* TO 'username'@'localhost'
IDENTIFIED BY 'password'; : grant all access to databasename for the username in the local machine that entered password

SHOW databases; : show the current databases in the system
CREATE DATABASE databasename : create new databasename

DESCRIBE table; : show the description of the created table

* A table is a database object that is composed of rows and columns and contains related data.
* A table is created in SQL using the "CREATE TABLE" command.

* A field is a column in a table that is supposed to provide specific information about all records in the table.

* A record is a row in a table. It is also known as "horizontal entity of a table".

* A column is a vertical entity in a table that contains information associated with a specific field.

* Null Value is NO VALUE. It is a space or zero, it is NOTHING!
* While inserting data in a table, if you do not provide value for a cell, the cell is said to contain Null Value.

DROP DATABASE databasename; : drop,delete the databasename from the system

* A data type is a property that specifies the type of data you can put in your table.
* Each field has a data-type and all values for a field that have the same data-type.

* Numeric Fields : a)Bigint (really big values!), b)Int (big values), c)Smallint (-32,768 to 32,767), d)Tinyint(0 to 255) 

* Datetime(YYYY-MM HH:MM:SS)
* Date (YYYY-MM-DD)
* Time (HH:MM:SS)
* Year (YYYY)

* BLOB (Binary Large Object) : to store images

* If you want to make sure that a field gets some value for every row in the table, apply the not null constraint to it.

* If while populating a table, you miss giving a column some value, the default value will be used.

* Unique Constraint makes sure that all values entered for the field on which the constraint is applied are different.

DESC tablename; : display, describe the tablename contents

DROP TABLE tablename; : drop, remove the tablename from the database

SHOW TABLES; : show all the tables in the database

TRUNCATE TABLE tablename; : truncate, delete all the data in tablename

* MySQL operator symbols : +, -, *, /, <. >, =
* MySQL operators generally used with the WHERE clause, it is used to limit the number of rows obtained in the output.
* MySQL types of operators: a) arithmetic, b) comparison, c) logical, d) reverse
* MySQL arithmetic operators : a)Addition(+), b)Subtraction(-), c)Multiplication(*), d)Division(/), e)Modular Division(%)

SELECT number + number; : do addition operation
SELECT number - number; : do subraction operation
SELECT number * number; : do multiplication operation
SELECT number / number; : do division operation
SELECT number % number; : do modulus operation

* MySQL comparison operators used to compare data present in columns to data specified in conditions.

* MySQL operators : 1)Equal To (=), 2)Not Equal To (<>), 3)Greater Than (>), 4)Less Than (<), 5)Greater Than or Equal To (>=), 6)Less Than or Equal To (<=)

SELECT * FROM employee WHERE salary<15000; : display all the information from employee database where salary is below 15000

SELECT salary FROM employee HERE nam='John'; : display salary of John from the employee database

* MySQL logical operators are to create complex query conditions
* MySQL logical operator types : a)ALL, b)AND, c)BETWEEN, d)IN, e)IN, f)LIKE, g)IS NULL

SELECT * 
FROM employee
WHERE age<=30 AND salary<=25000; : display all the rows data of employee table that contain age above and equals to 30 and salary below and equal to 25000 from the employee table

SELECT *
FROM employee
WHERE salary IS NULL; : display all employee table data where salary got null value or no value at all

SELECT *
FROM employee
WHERE name LIKE 'p%'; : display all the employee rows data where name start with p character

SELECT *
FROM employee
WHERE age IN (28,30,36); : display all the employee records where the age is 28,30,36

SELECT *
FROM employee
WHERE age BETWEEN 28 AND 36; : display all the employee records where the age is between 28 and 36

SELECT * 
FROM employee
WHERE age < ALL (SELECT age FROM employee WHERE salary>20000); : display all employee table data where age is below all the age in employee table data where their salary is above 20000

* WHERE clause is used to include a condition while fetching data from tables. It is also used to join multiple tables.

SELECT column_list
FROM table_name
[WHERE condition]; : display all the data from table_name where column_list meet the condition

SELECT *
FROM employee
WHERE name = 'Kurt'; : display from employee data table where column has name equal to Kurt

* AND or OR operators are used to combine multiple conditions specified with the WHERE clause.
* AND makes it necessary for all conditions to be true.
* OR works even if any one is true

SELECT * 
FROM employee
WHERE salary > 15000 OR age < 30; : display all the records of employee data table where their salary is above 15000 or their age is below 30

* UPDATE query is used to update rows in a table
* UPDATE query generally used with the WHERE clause

UPDATE employee
SET age=26
WHERE id=19000; : update the employee data table by setting the age to 26 where id is 19000

* The DELETE query is used to delete records from a table
* DELETE query mostly used with the WHERE clause

DELETE FROM table_name
[WHERE condition]; : delete from table_name where it meets the stated condition

* LIKE operator is used to compare a value to similar values in a table of the database.
* LIKE operator is used with Wildcard characters.

* Wildcard Characters : 1)% (percentage symbol : substitution for zero, one or many characters), 2)_ (underscore character : stands for one character or number)

SELECT *
FROM employee
WHERE email LIKE '%hotmail%'; : display from employee data table where their email got hotmail extension in it

SELECT *
FROM employee
WHERE age LIKE '2_'; : display from employee data table where their age start with 2 in 2 digit format

SELECT *
FROM employee
LIMIT 5; : display top 5 columns from employee table data

* MySQL ORDER BY clause is to sort data fetched from a table.

SELECT *
FROM employee
ORDER BY name; : sort the employee data table, order by their name

SELECT *
FROM employee
ORDER BY age; : display employee data table sort by their youngest age

SELECT *
FROM employee
ORDER BY age DESC; : display employee data table sort by their oldest age

SELECT *
FROM employee
ORDER BY salary DESC; : display employee data table sort by their highest salary

* GROUP BY clause is used to array indentical data in groups
* GROUP BY clause is used with the SELECT query
* GROUP BY must always follow the WHERE clause and must precede the ORDER BY clause

SELECT subject, COUNT(*)
FROM tutorial
GROUP BY subject; 														: count the number of subject from tutorial data table and group them by subject

SELECT subject, SUM(duration)
FROM tutorial
GROUP BY subject; 														: sum up all the duration from tutorial data table and group them by subject

SELECT salary FROM employee
ORDER BY salary;														: display salary from employee data table, distinct them from each other and order them by salary

SELECT title, upload_date, duration
FROM tutorial;															: display title, upload_date, duration from tutorial data table

SELECT title AS Title, upload_date AS 'Upload Date', duration AS Length
FROM tutorial;															: display title as Title, upload_Date as Upload Date, duration as Length from tutorial data table

SELECT t.id, t.title, t.duration,
ti.views, ti.likes, ti.shares
FROM tutorial AS t
JOIN tutorial_info AS ti
ON t.id=ti.tutorial_id; 							: select id, title, duration from tutorial data table aliasing as t, select views, likes, shares from tutorial_info data table aliasing as ti, join both tables on the same id number

SELECT t.id, t.title, t.duration,
ti.views, ti.likes, ti.shares
FROM tutorial AS t, tutorial_info AS ti
WHERE t.id=ti.tutorial_id; 							: select id, title, duration from tutorial data table, aliasing them as t, select views, likes, shares, aliasing them as ti where their id number are the same

SELECT t.subject, SUM(ti.views) AS 'Total Views',
SUM(ti.likes) AS 'Total Likes'
FROM tutorial AS t
JOIN tutorial_info AS ti
ON t.id=ti.tutorial_id
GROUP BY t.subject;									: select subject, sum of views from tutorial data table, display sum of views as total views, select sum of likes from tutorial_info data table, aliasing tutorial as t, aliasing tutorial_info as ti, join both tutorial and tutorial_info on same id number, group them by the tutorial data table subject

SELECT t.subject, SUM(ti.views) AS 'Total Views',
SUM(ti.likes) AS 'Total Likes'
FROM tutorial AS t
LEFT JOIN tutorial_info AS ti
ON t.id=ti.tutorial_id
GROUP BY t.subject; 								: select subject, sum of views aliasing it as Total Views from tutorial data table, select sum of likes aliasing it as Total Likes from tutorial_info data table, aliasing tutorial as t, aliasing tutorial_info as ti, left join both tables on the same id number although one of the table did not consist enough data on it, group them by subject from tutorial data table, pull tutorial_info data table into tutorial data table

SELECT t.subject, SUM(ti.views) AS 'Total Views',
SUM(ti.likes) AS 'Total Likes'
FROM tutorial AS t
RIGHT JOIN tutorial_info AS ti
ON t.id=ti.tutorial_id
GROUP BY t.subject;									: select subject, sum of views aliasing as Total Views from tutorial data table, select sum of likes aliasing as Total Likes from tutorial_info data table, aliasing tutorial as t, aliasing tutorial_info as ti, right join both tables on the same id number although one of the table did not consist enough data in it, group them by subject in tutorial data table, pull tutorial data table into tutorial_info data table

SELECT ABS(15);  : will display 15
SELECT ABS(-15); : will display 15

SELECT t.title,
ABS(ti.likes-ti.dislikes) AS 'Difference of Likes and Dislikes'
FROM tutorial AS t
JOIN tutorial_info AS ti
ON t.id=ti.tutorial_id;											: select title from tutorial data table, select absolute values of differences of likes and dislikes from tutorial_info data table, display it as Differences of Likes and Dislikes, aliasing tutorial as t, aliasing tutorial_info as ti, join both tables on the same id number

SELECT ROUND(54.783); 	: round it to 55
SELECT ROUND(54.783,0);	: round it to 55, keep 0 decimal point
SELECT ROUND(54.783,1); : round it to 54.8, keep 1 decimal point
SELECT ROUND(54.783,2); : round it to 54.78, keep 2 decimal points
SELECT ROUND(54.787,2); : round it to 54.79, keep 2 decimal points
SELECT ROUND(-12.57,0); : round it to -13, keep 0 decimal point

SELECT t.subject, AVG(ti.likes)
FROM tutorial AS t
JOIN tutorial_info AS ti
ON t.id=tutorial_id
GROUP BY t.subject; 			: select subject from tutorial data table, select average likes number from tutorial_info data table, join both tables on their same id number, group by subject in tutorial data table

SELECT t.subject, ROUND(AVG(ti.likes))
AS 'The Average number of Likes rounded off to the nearest decimal point'
FROM tutorial AS t
JOIN tutorial_info AS ti
ON t.id=tutorial_id
GROUP BY t.subject; 														: select subject from tutorial data table, select average likes from tutorial_info data table and round it off to the nearest decimal point, change the title of the calculation aliasing it into The Average number of Likes rounded off to the nearest decimal point, aliasing tutorial as t, aliasing tutorial_info as ti, join both tables on the same id number, group them by subject in tutorial data table

SELECT 5 DIV 2; : divide 5 by 2, display 2
SELECT 5 MOD 2; : give the result of 5 modulus 2, display 1

SELECT duration FROM tutorial; : display duration data field from tutorial data table

SELECT title, duration DIV 1 AS minutes,
duration*60 MOD 60 AS seconds
FROM tutorial;							 	: select title, duration divide by 1 aliasing it as minutes, multiply duration by 60 modulus 60 as seconds from tutorial data table

SELECT title, duration DIV 1 AS minutes,
ROUND(duration*60 MOD 60) AS seconds
FROM tutorial;								: select title, duration divide by 1 aliasing as minutes, duration multiply by 60 modulus 60, round them all and aliasing it as seconds from tutorial data table

SELECT CEIL(35.40); 	: give the ceiling number for 35.40. which will display 36
SELECT FLOOR(35.40); 	: give the floor number for 35.40, which will display 35
SELECT EXP(5);			: give the exponential value of 5
SELECT LOG(5);			: give the log value of 5, base e
SELECT LOG10(2);		: give the log value of 2, base 10
SELECT POW(2,7);		: give the power value of 2 power of 7
SELECT POW(2.718,5);	: give the power value of 2.718 power of 5

SELECT GREATEST(5,3,1,77,9,11,6,3,3,89); 	: give the highest number value for the range of numbers in the GREATEST() function, which will display 89
SELECT LEAST(5,3,1,77,9,11,6,3,3,89);		: give the lowest number value for the range of numbers in the LEASET() function, which will display 1

SELECT RADIANS(180); 	: show the radians result for 180
SELECT SQRT(196);		: show the square root for 196 which is 14
SELECT SQRT(225); 		: show the square root for 225 which is 15

SELECT TRUNCATE(225.6548,2) 			: truncate the value in the TRUNCATE() function to 2 decimal points, which will display 225.65
SELECT TRUNCATE(225.6548546465463,5); 	: truncate the value in the TRUNCATE() function to 5 decimal points, which will display 225.65485

SELECT RAND(); : generate random numbers

SELECT CONCAT('Hello ', 'World'); : concatenate 'Hello ' and 'World' to become 'Hello World' statement

SELECT CONCAT(title, ' belongs to ', subject) AS Tutorial
FROM tutorial; 												: select and concatenate title data field with ' belongs to ' words and subject data field, aliasing all of them as Tutorial, pull all the relevant data from tutorial data table

SELECT UPPER('Hey there!'); 		: display the letters written in the UPPER() function in upper case letters, display 'HEY THERE!'
SELECT LOWER('Hey there!'); 		: display the letters written in the LOWER() function in lower case letters, display 'hey there!'

SELECT UPPER(title) FROM tutorial; 	: display title data field from tutorial data table in upper case letters
SELECT LOWER(title) FROM tutorial; 	: display title data field from tutorial data table in lower case letters

SELECT TRIM('     i have got too much spaces on either side    '); : trim the spaces for the statement in TRIM() function

SELECT SUBSTR('I need a break', 10, 5); : select the letters from the offset 10th position with length of 5, display 'break'

SELECT RIGHT('I need a break', 5); 		: select the letters 5th from the right position in th RIGHT() function, display 'break'
SELECT LEFT('I need a break', 6); 		: select the letters 6th from the left psoition in the LEFT() function, display 'I need' 

SELECT LENGTH('Hello World!'); 		: estimate the space in computer memory for the statement in the LENGTH() function, display 12

SELECT CHAR_LENGTH('Hello World!') 	: count the length of characters in the CHAR_LENGTH() function including the spaces, display 12

SELECT INSERT('Hello Word', 7, 5, 'World'); : insert the 7th position from left with lenghth of 5, the characters 'World', display 'Hello World'

SELECT REPEAT('Good Morning!', 10); : repeat the statement in REPEAT() function 10 times

SELECT REPLACE('Good Morning!', 'Morning', 'Night'); replace 'Morning' with 'Night' in the REPLACE() function statement, display 'Good Night!'

SELECT REVERSE('See you later, Alligator'); : reverse the statement in REVERSE() function

SELECT STRCMP('Day', 'Day'); 	: compare the string 'Day' with 'Day', display 0 as 'D' is equal value to 'D'
SELECT STRCMP('Day', 'Night'); 	: compare the string 'Day' with 'Night', display -1 because 'D' is smaller than the value of 'N'
SELECT STRCMP('Night', 'Day');	: compare the string 'Night' with 'Day', display 1 beacuse 'N' is larger than the value of 'D'

SELECT ADDDATE('1989-11-20', INTERVAL 25 DAY); 		: display the date after 25 days from 20 November 1989
SELECT ADDDATE('1989-11-20', INTERVAL 25 MONTH); 	: display the date after 25 months from 20 November 1989
SELECT ADDDATE('1989-11-20', INTERVAL 25 YEAR); 	: display the date after 25 years from 20 November 1989

SELECT SUBDATE('1989-11-20', INTERVAL 25 DAY); 		: display the date before 25 days from 20 November 1989
SELECT SUBDATE('1989-11-20', INTERVAL 25 MONTH);	: display the date before 25 months from 20 November 1989 
SELECT SUBDATE('1989-11-20', INTERVAL 25 YEAR);		: display the date before 25 years from 20 November 1989

SELECT CURDATE(); : display current date of the system
SELECT CURTIME(); : display current time of the system

SELECT DAYNAME('2007-07-14');			 : display the day of 14 July 2007

SELECT upload_date, DAYNAME(upload_date)
FROM tutorial;							 : display the upload_date, day of upload_date data fields from tutorial data table

SELECT NOW(); : display current date and current time of the system

SELECT MAKEDATE(2003, 231); : display the date of 231 day of year 2003

SELECT MONTHNAME('2017-03-04'); : display the month of 4 March 2017

SELECT TIMEDIFF('1976-10-11 17:50:28', '1976-10-11 20:08:27'); : display the time difference in the TIMEDIFF() function

SELECT TIME_TO_SEC('23:15:26'); : convert the time in TIME_TO_SEC() function into number of seconds

SELECT UNIX_TIMESTAMP(); : display UNIX timestamp of the current system

CREATE VIEW emp_view AS
SELECT id, name, email
FROM employee
WHERE name IS NOT NULL; : create new emp_view view table, select id, name, email from employee data table where the name is not null value, aliasing employee data table

INSERT INTO emp_view
VALUES('1917, 'Craig', 'craig007@gmail.com'); 	: insert into emp_view values from VALUES() function, will also affect the source table, the employee data table

INSERT INTO emp_view
VALUES('1917', NULL, 'notavailable@gmail.com'); : will not insert any value into emp_view since one of the data is null value, but it will affect the source table, the employee table

CREATE VIEW emp_view_new AS
SELECT id, name, email
FROM employee
WHERE name IS NOT NULL
WITH CHECK OPTION;			: create emp_view_new view table, select id, name, email from employee data table where name is not null value with check option, which will never insert null value which will display the MySQL error message when executed, aliasing the employee data table

INSERT INTO emp_view_new
VALUES(1919, NULL, 'trythis@gmail.com'); : this SQL statement will never be executed since it got null value in the VALUE() function statement

UPDATE emp_view
SET name='BOND'
WHERE id=1917; : update the emp_view frame, set the name to 'BOND''where the id is 1917, will also affect the source table, the employee data table

SELECT * FROM emp_view; : display the affected result in emp_view table

SELECT * FROM employee; : display the affected result in employee table

DELETE FROM emp_view
WHERE id=1917; 			: delete from emp_view and source table, employee table where the id is equals to 1917

DROP VIEW emp_view; : drop the emp_view table from the system

SELECT * FROM emp_view; : will return MySQL error message since emp_view table did not exist anymore